@prefix n3:    <http://www.w3.org/2004/06/rei#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

n3: a  owl:Ontology;
  rdfs:seeAlso <https://www.w3.org/DesignIssues/Reify.html> .

n3:Term
  rdf:type  rdfs:Class;
  rdfs:label   "term" .

n3:Formula
  rdfs:comment     "A formula is identified by an unordered set of statements,\n\twith a sets of existentially and universally quantified symbols.\n\tFor example, \n\t\t[ :forAll  ( [:uri \"ex:#x\"] [:uri \"ex:#y\"]);\n\t\t  :forSome ( [:uri \"ex:#a\"] [:uri \"ex:#b\"]);\n\t\t  :statements ( :s1 :s2 :s3 )\n\t\t]\n\tis equivalent to e.g. in loose math\n\t\tforall x,y,x there exists a,b,c such that s1 and s2 and s3\n\tThat is, the universals are always outside the existentials.\n\tTwo formulae are the equal if the contents\n\tof their forAll, forSome, and statements lists are the same\n\tirrespective of order.\n\tTwo formulae are equivalent if there is a 1:1 mapping between\n\tvariable names of one and variable names in the other\n\twhich used as subsitution bindings on one gives a formula\n\tequal to the other.\n\t";
  rdfs:label       "Formula";
  rdfs:subClassOf  n3:Term .

n3:existentials
  rdf:type  rdf:Property;
  rdfs:comment  "The set of existentially quantified symbols.";
  rdfs:domain  n3:Formula;
  rdfs:label   "for all";
  rdfs:range   rdfs:Class .

n3:statements
  rdf:type   rdf:Property;
  rdfs:comment  "A closed set of statements. The order of the statements is irrelevant.";
  rdfs:domain   n3:Formula;
  rdfs:label    "statements";
  rdfs:range    rdfs:Class .

n3:universals
  rdf:type  rdf:Property;
  rdfs:comment  "The set of universally quantified symbols.";
  rdfs:domain  n3:Formula;
  rdfs:label   "for all";
  rdfs:range   rdfs:Class .

n3:RDFGraph
  rdfs:comment     "A formula which meets the constraints of being\n\tan RDF Graph as per the RDF spec. No universally qualified variables,\n\tno nested formulae, no literals as subject, etc.";
  rdfs:label       "RDF Graph";
  rdfs:subClassOf  n3:Formula .

n3:Symbol
  rdfs:label       "Symbol";
  rdfs:comment     "RDF symbol; identified by a URI.";
  rdfs:subClassOf  n3:RDFTerm .

n3:uri
  rdf:type   rdf:Property, owl:InverseFunctionalProperty;
  rdfs:comment  "The URI of the symbol is all that is needed to identify it.\n\tThis is the name string.";
  rdfs:label    "symbol URI, not arbitrary" ;
  rdfs:domain   n3:Symbol;
  rdfs:range    xsd:string .

n3:BNode
  rdfs:label       "blank node";
  rdfs:subClassOf  n3:Term .

n3:RDFTerm
  rdfs:subClassOf  n3:Term .

n3:Statement
  rdf:type   rdfs:Class;
  rdfs:comment  "A statement is the unit of information.\n\tIt expresses a binary relation.\n\tIts significance is determined by the relation,\n\tgenerally referred to as its predicate.\n\t";
  rdfs:label    "Statement" .

n3:subject
  rdf:type  rdf:Property, owl:FunctionalProperty;
  rdfs:domain  n3:Statement;
  rdfs:label   "subject";
  rdfs:range   n3:Term .

n3:predicate
  rdf:type  rdf:Property, owl:FunctionalProperty;
  rdfs:domain  n3:Statement;
  rdfs:label   "predicate";
  rdfs:range   n3:Term .

n3:object
  rdf:type  rdf:Property, owl:FunctionalProperty;
  rdfs:domain  n3:Statement;
  rdfs:label   "object";
  rdfs:range   n3:Term .

n3:subjURI
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for subject!uri";
  rdfs:domain   n3:Statement;
  rdfs:label    "subject URI";
  rdfs:range    xsd:string .

n3:predURI
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for predicate!uri";
  rdfs:domain   n3:Statement;
  rdfs:label    "predicate URI";
  rdfs:range    xsd:string .

n3:objURI
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for object!uri";
  rdfs:domain   n3:Statement;
  rdfs:label    "object URI";
  rdfs:range    xsd:string .

n3:subjValue
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for subject!Literal. Not in RDF 1.0";
  rdfs:domain   n3:Statement;
  rdfs:label    "subject value";
  rdfs:range    xsd:string .

n3:predValue
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for predicate!Literal. Not RDF 1.0.";
  rdfs:domain   n3:Statement;
  rdfs:label    "predicate value";
  rdfs:range    xsd:string .

n3:objValue
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "Shorthand for object!Literal";
  rdfs:domain   n3:Statement;
  rdfs:label    "object value";
  rdfs:range    xsd:string .

n3:Literal
  rdfs:comment     "Literals are identified by their string value, their\n\tdatatype (or absence thereof) and their language code\n\t(or absencethereof). As we are modeling RDF in RDF,\n\twe can just use a literal the value of a literal.\n\t";
  rdfs:label       "Literal";
  rdfs:subClassOf  n3:RDFTerm .

n3:value
  rdf:type   rdf:Property, owl:FunctionalProperty;
  rdfs:comment  "The value of a literal.\n\n\tValue is the relation between a node (which happens to be a literal, list etc,..) and the value it takes.";
  rdfs:domain   n3:Literal;
  rdfs:label    "Value" .
